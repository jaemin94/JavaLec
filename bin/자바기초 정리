 --------------------------------------- 기초 --------------------------------------------------- 
  1. 변수
  	- 자료형	:
  		- 기본자료형
  			- 논리형	: boolean
  			- 문자형	: char
  			- 정수형	: byte, short, int, long
  			- 실수형	: float, double		
  	- 참조자료형	: 기본자료형 외  	
  	- 데이터사이즈	
  			- 1바이트	: boolean, byte
  			- 2바이트	: char, short
  			- 3바이트 : int, float
  			- 4바이트 : long, double
  	- 형변환	:
  		- 자동형변환	: 작은수를 큰 데이터에 넣을때 자동으로 형변환
  		- 명시적형변환	: 큰수를 작은 데이터에 넣을때 앞에 데이터병을 명시적으로 써주는 형변환(실수, 정수 등)
  		- 데이터크기	: byte > short/char > int > long > float > double
  
  2. 연산자
	- 기본연산자	: + - / * %(짝홀수, 배수, 범위, 자리수)
	- 대입연산자 : Lv(공간) = Rv(값)
	- 복합대입연산자 : +=, -=, *=, /=, %=
	- 비교연산자 : >, >=, <, <=, ==, !=
	- 논리연산자 : &&, ||, !
	- 증감연산자 : ++, --
	- 삼항연산자 : (조건식) ? 참 : 거짓
	
	- 비트연산자 
		- 비트 논리 연산자
			- & 	: 두 항의 비트가 모두 1이면 1, 아니면 0으로 연산
			- |		: 두 항의 비트가 모두 0이면 0, 아니면 1로 연산
			- ^		: 두항의 비트가 서로 다르면 1, 같으면 0으로 연산
		- 비트 시프트 연산자
			- >> 	: 왼쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동
			- << 	: 왼쪽 피연산자를 오른쪽 값만큼 비트를 왼쪽으로 이동
			- >>>	: 왼쪽 피연산자를 오른쪽 값만큼 부호 비트를 무시한 채 0 으로 채우면서 오른쪽으로 이동
		-비트 대입 연산자
			- &=	: 두항의 비트가 모두 1이면 1, 아니면 0으로 연산하여 왼쪽 피연산자에 대입
			- |=	: 두항의 비트가 모두 0이면 0 아니면 1로 연산하여 왼쪽 피연산자에 대입
			- ^=	: 두항의 비트가 서로 다르면 1, 같은면 0 으로 연산하여 왼쪽 피연산자에 대입
			- >>=	: 외쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동한후 대입
			- <<=	: 왼쪽 피연산자를 오른쪽 값만큼 비트르 왼쪽으로 이동한 후 대입 
	
  3. 조건문
	- 분기	:	if, Switch
				if(조건식)
				{
					종속코드..
					종속코드..
				}
				if / if - else / if - else - if
					
  4. 반복문	:	while, for  
 
  5. 배열		: 같은 타입의 변수를 연속된 공간에 한번에 선언하는것
  	- 배열 접근방법 
  		- 배열에는 인덱스가 있다. (배열이름[인덱스])
  		- 배열 인덱스는 변수도 사용 가능한다.
  	- 배열 초기화	: 배열 초기화 할때는 for문을 사용하되 변수의 길이를 상수로 직접 적는것보다 length를 사용하는것이 좋다
  				: 반복문으로 하나씩 출력 가능하다.
  				: arrays 클래스의 toString 메서드를 통해 출력 가능하다.
  				: 클래스형 배열을 만들때는 배열 생성은 선언후 초기화 및 값을 입력할때 배열을 다시 선언해줘야한다.
  				: 향상된 포문 
  					- for(int i : arr)
  					- 향상된 포문으로 순차적으로 초기화 시킬수 있다. 
  	
  	- 더 큰큰기의 배열이 필요하다면 arraycopy 함수 사용으로 값을 넘겨 줄수있다.
  		: System.arraycopy(arr,0,temp,arr.length)
  			- arr	: 원본배열명
  			- temp	: 새로 저장될 배열명
  			- arr.length: 복사할 갯수
  		: int arr4[] = Arrays.copyOf(arr1, arr1.length)
  			- arr4 	: 새로운 배열 생성
  			- copyOf: 복사하는 코드
  			- (arr1, arr1.length) : 커피할 기존 배열 , 기존배열의 길이(또는 새로 정수를 입력하여 길이를 정할수있음)
  	
  	- 버블정렬	: 순차적으로 하나씩 자리를 바꿔주면서 순서대로 정렬하는 형식
  		예시	: int[] arr = new int[10];
		
			 for(int i = 0; i<arr.length; i++)
			 arr[i] = (int)(Math.random()*10);
		
			 System.out.println("정렬전: " + Arrays.toString(arr));
		
			 for (int i = 0; i < arr.length - 1; i++) {
            	for (int j = 0; j < arr.length - i - 1; j++) {
                	if (arr[j] > arr[j + 1]) {
                    	int temp = arr[j];
                    	arr[j] = arr[j + 1];
                    	arr[j + 1] = temp;
                	}
            	}
            
        	 }
			 System.out.println("정렬후 : "+ Arrays.toString(arr));
		  	 }

		설명 : 첫 번째 for 루프는 정렬의 패스를 나타냅니다. 배열의 길이 arr.length에서 1을 뺀 값까지 반복합니다. 
				 이는 정렬을 위해 비교할 요소의 범위를 줄여나가기 위함입니다. 
				 각 패스마다 최대 하나의 요소가 제 위치에 정렬되기 때문에 전체 패스 수는 arr.length - 1입니다.
				 두 번째 for 루프는 현재 패스에서 인접한 두 요소를 비교하여 필요한 경우 위치를 교환합니다. 
				 j 변수는 현재 요소의 인덱스를 나타내며, 0부터 arr.length - i - 1까지 반복합니다. 
				 arr.length - i - 1은 현재 패스에서 비교해야 하는 요소의 개수를 나타냅니다. 
				 패스가 진행됨에 따라 큰 값은 배열의 끝으로 이동하므로, 매 패스마다 비교할 요소의 개수는 1씩 줄어듭니다.
				 if 문은 현재 요소 arr[j]와 그 다음 요소 arr[j + 1]를 비교하여 만약 
				 arr[j]가 arr[j + 1]보다 크다면 두 요소의 위치를 교환합니다. 
				 이를 통해 더 큰 값은 오른쪽으로 이동하여 점점 정렬되어가는 구조입니다.
				 위의 과정을 모든 패스에 걸쳐 반복하면 배열이 오름차순으로 정렬됩니다.
				 내림차순으로 변경시 비교연산자를 > 에서 < 으로 변경
  	
  	6. 다차원배열 : 단일 배열이 아닌 여러 데이터칸을 가지고 있는 칸을 생성 
  		- for문을 이용한 2차원 배열 초기화
  			: for(int i[] : arr)
  				for (int j : i)
  			이처럼 향상된 for문을 이중으로 사용한다.
  	7. 가변배열   : 다차원 배열의 각 요소인 1차원 배열의 길이는 달라도 된다
  			예시	: int[][] i = new int[5][] 
  				
 --------------------------------------------------------------------------------------------- 
  1. 객체지향
  	- 존재 사물	: 공간을 차지하는 사물
  	- 인스 턴스	: 객체가 추상화 과정을 통해 자바프로그램 내의 메모리공간에 저장된 상태
  	- 객체 구조	: 속성/기능/생성자
  	- 클래스 		: 객체 생성 위한 자료형
  	- 멤버변수		: 속성,필드 -> 객체의 개별정보 저장용
  	- 멤버메서드	: 기능 -> 액션,동사형, 특정 역할 수행위한 코드블럭
  	- 메서드기본구조: 헤더(반환자료형 함수명 (파라미터..)  )+바디(처리 로직)
  	- 메서드오버로딩: 메서드 파라미터의 형태를 다양하게 둘 수 있도록 허용한 문법
  	- 지역변수		: {} 내에서 선언되는 변수 ,{}벗어나면 기본적으로 소멸 
  	- 메모리구조 	
  			- 스택영역				: {}내에서 선언되는 변수, {} 벗어나면 소멸
  			- 클래스(메서드) 영역	: 공유메모리 영역, static변수, static함수, 멤버변수, 생성자 함수
  			- 힙영역				: 객체 생성시(new 예약어) 메모리 공간 할당, 참조변수 연결해제시 GC(garbage_class)에 의해 제거
  		
  	
 2. 생성자 함수(메서드)
  	- 객체 생성시에 한번 호출되는 특수한 메서드
  	- 객체 생성시에 한번 호출되는 특수한 메서드
	- 객체 생성시에 1회 호출
	- 객체 생성시 필요한 초기값을 부여
	- 생성자 함수는 클래스 이름과 동일하며 반환자료형을 가지지 않는다. 
	- 생성자 함수를 명시하지 않을때 기본적으로 컴파일러에 의해 주입되는 생성자가 있는데 이를 디폴트 생성자라고 한다.
	- 컴파일러에 의해 주입받는 디폴트 생성자는 모든 멤버의 초기값을 '0 or false or null' 로 지정
	- 생성자 오버로딩 : 생성자 함수의 파라미터형을 다양하게 허용함으로써 외부로부터의 다양한 초기값을 허용
	
  3. This 함수
  	- 클래스 내에서 사용되는 예약어
  	- 생성되는 개체의 위치정보(메모리주소) 를 가져오는데 사용
  	- This 활용 : 
  			- 멤버 변수와 매개변수를 구별 : this.x (매개변수) = x (멤버면수);	
  			- 같은 클래스내의 다른 생성자 호출
 
  4. 접근 한정자
  	- public	: 모든 클래스에서 접근가능
  	- defalut	: 동일 패키지에 속한 클래스에서만 접근가능
  	- private	: 동일 패키지 or 상속관계의 하위클래스에서만 접근가능
  	- protected	: 현재 클래스에서만 접근가능
 
  5. Getter , Setter(화면에서 우클릭 > Source > generate getter setter 눌러서 만들수있다.)
  	- Getter = 저장된 값을 불러오는 함수 (리턴 타입을 받는 함수 : int get변수명())
  	- Setter = 지정한 값을 입력하는 함수 (public void 로 리턴타입 없음, 단 리턴을 사용가능. 보통 this로 값을 받아 저장)
  
  6. 캡슐화
  	- 특정 목적을 가지는 기능 구현하는데 있어서 각 과정의 일부나 전부가 외부로의 노출이 불필요한 경우는 정보은닉(Private)을
  	  포함하여 각 과정을 세부기능들의 순서를 지정하여 사용가능한 함수로 지어하는데 이를 캡슐화라고 한다.
  
  7. String 메서드 사용
 	- contain	: 문자열 포함여부
 	- split		: 구분자를 기준으로 문자열을 분할 (배열형으로 저장)
 	- join		: 구분자를 기준으로 문자열을 합친다
 	- trim		: 앞뒤 공백 제거
 	- indexof	: 문자열의 인덱스 번호 확인
 	- substring	: 문자열 자르기
 	- equals	: 문자열의 내용이 같은지 확인
 	
  8. Static
  	- 객체간의 공유되는 변수
  	- 객체 생성과는 무관하게 메모리공간에 할당
  	- 객체 생성없이 클래스명으로 사용가능
  	- 공유함수를 만들게 되면 그 안에서 객체가 생성되기전 없는 멤버 변수를 사용 할 수 없다.
  	
  9. 싱글톤 패턴
  	- 생성자를 private 으로 선언
  	- 외부에서 사용할수있는 반환 메서드 선언
  	- 인스턴스 변수 : 유일한 인트스턴스를 저장하기 위한 정적 변수를 클래스 내부에서 선언
  	- 객체를 지정된 개수만큼 공유한다. 	
  	
 10. 상속
 	- 상속을 사용하는 3가지 이유	: 확장성, 유지보수, 가독성
  	- 만들어 놓은 클래스의 멤버변수 와 멤버 메서드를 다른 클래스에 extends 를 뒤에 붙여 기존 클래스를 상속 받을수있다.
  	- 자식에서 멤버변수 와 멤버 메서드를 만들지 않아도 상속받아 마치 선언해놓은것처럼 사용할수있다.
  	- 받은 하위클래스는 상위클래스의 속성과 기능 이외의 멤벌르 추가할 수 있다.
  	- 부모의 멤버를 가져오는것이 아니라 부모와 별도로 멤버를 생성하는것이다.
  	- 부모가 디폴트생성자가 없다면 자식 또한 디폴트 생성자를 만들어주지 않는다.
  	- 다중 상속은 되지 않는다. 
  	 	
  	- super
 		- 부모로부터 물려받은 멤버변수, 메서드를 가리킬때 사용한다.
 		- 부모로 부터 상속받은 멤버 변수들은 부모의 멤버변수와는 별개로 생성된다.
 		- 부모의 메서드를 오버라이딩 할때도 사용된다.
 		
 	- 오버라이딩(재정의)
 		- 상속받은 부모의 메서드를 물려받은 멤버변수, 메서드를 자식이 새롭게 덮어쓰는 것이다.
 		- 메서드의 이름, 매개변수, 리턴 타입이 일치해야한다.
 		- 리턴이 부모타입일때 자식의 타입으로 변환하여도 오버라이딩으로 인정된다.
 		- 오버라이딩이 아니라면 함수 이름과 매개변수가 같기에 오버로딩으로 분류된다
 		- 오버로딩은 리턴타입을 고려하지 않기에 결국 메서드 중복정의로 해당메서드를 문법적으로 만들 방법이 없다.
 		- static : 인스턴스 메서드의 변환은 불가능하다
 		
 		- 오버로딩과의 차이점
 			- 오버라이딩	: 상속시 부모의 메서드를 덮어쓴다. 시그니처가 동일하다
 			- 오버로딩		: 메서드를 증설한다. 시그니처가 다르다
 			
 	- 다향성
 		- 캐스팅		
 			- 자동형변환
 				- 업캐스팅(자식 이 부모 타입으로 형변환)
 					- 사용하는 이유 : 상속받는 모든객체를 알기위해서 사용한다.
 					- 부모 클래스형의 참조변수 = 자식클래스의 객체
 					- 부모 클래스형의 참조변수를 통해서는 부모 클래스의 속성에만 접근 가능
 					- 자식 클래스는 부모의 모든 정보를 가지고 있기에 자동적으로 형변환이 된다.
 					- 하지만 자식 클래스에서 추가된 메서드, 멤버변수는 사용할수가 없다.
 					- 업캐스팅 되어있으면 오버라이딩을 통해 물려받은 메서드를 변경하여 사용할수있다.
 				
 			- 명시적형변환
 				- 다운캐스팅(부모 가 자식 타입으로 형변환)
 					- 사용하는 이유 : 상속받는 범위외에 확장된 멤버변수, 메서드를 사용하기위해 사용한다.
 					- 부모 클래스는 자식클래스의 모든 정보를 가지고 있기 않기에 객체를 생성할때 명시적으로 형변환을 해야한다.
 					- 자식타입으로 다운캐스팅을 하면 자식 클래스 내의 추가된 메서드, 멤버 변수를 사용할수가 있다.
  	
  			- instanceof
  				- 참조 변수가 가리키는 실제 객체의 타입이 무엇인지 알수 있는 키워드이다.
  				- 사용 할때는 if문 또는 여러개를 한번에 찾아볼 경우에느 if-else 문을 사용한다
  		
  		- 추상 클래스 와 추상 메서드
  			- 사용하는 이유 : 프로그램을 구체적으로 어떻게 구현할지 결정이 되지 않앗거나, 프로그램을 동일한 규격으로 만들수 있도록 가이드를 제공하기 위함
  			- class 앞에 abstract 클래스명으로 정의하여 만들수있다.
  			- 만약 추상 메서드가 있다면 클래스도 반드시 추상클래스로 정의해야된다.
  			- 상위 클래스가 하위 클래스한테 메서드를 쓰라고 강제성을 부여 한다.
  			- 추상 메서드를 하나 이상 포함해야한다.
  				- 추상메서드	: 정의되지 않고 선언만 한 메서드
  				- 예시		: abstract void Func1() , 바디를 만들지 않는다.
  			 			
  			- 추상 클래스는 객체를 생성에 사용되지 않으며 반드시 추상 클래스를 상속받은 클래스를 만드후에
  			  상속받은 모든 추상 메서드를 오버라이딩하여 일반 메서드로 완성한 다음에 객체를 생성할수있다.	
  
  11. 인터페이스
  	- 사용 이유 
  		- 낮은 결합도 유지 				: 다형성 구현에 인터페이스를 사용하여 결합도를 낮춤
  		- 설계 사상을 코딩단계에서 구현		: 인터페이스를 통해 정의한 내용을 코딩단계에서 클래스로 구현되도록 강제 할수있다.
  	- 멤버 메서드가 모두 추상 메서드인 추상클래스
  	- 선언시 class 대신 interface 라고 선언
  	- 인터페이스의 부모는 무조건 인터페이스여야 한다
  		- 인터페이스 vs 추상클래스 
  			- 추상클래스와 다르게 모든 메서드가 추상메서드인다. 
  			- 인터페이스는 내부가 구현된 메서드를 가질수 없다.
  	
  	- 인터페이스는 다중 상속이 가능하다.
  	- 인터페이스를 구현할때 클래스명 뒤에 implements 라는 키워드를 붙이고 그후 사용할 인터페이스를 입력한다.
  	- 인터페이스 구현은 상속과는 별개로 클래스를 상속 받으면서 인터페이스도 사용이 가능하다
  	- 클래스를 상속받으면서 인터페이스를 구현할때는 extends 클래스명 implements 인터페이스명 으로 사용가능하다
  	- Static 메서드는 객체와 무관한 메서드여서 인터페이스에서도 사용이 가능하다
  	- 인터페이스는 구현할때 추상 메서드들을 무조건 구현해야한다.
  	- default 메서드
  		- 인터페이스 특성상 모든 추상메서드를 구현해야하는데 만약에 인터페이스에 추가가 된다면 인터페이스를 사용하는 모든 클래스를
  		  재정의하게 된다. 이를 방지하기 위한것이 default 메서드이다.
  		- 이때 메서드 앞에 default 를 붙이고 줄괄호를 만들어주면서 이 메서드를 사용할 클래스 내에서 재정의를 해주면된다.
  		- 하지만 이러한 코드는 인터페이스 목적과는 맞지않는 코드라 안좋게 볼수도 있다.
  		  
  12. 기본 클래스
  	- Java.lang 패키지	: 기본으로 import 시켜준다
  	- object 클래스		
  		- equals			: 객체의 주소가 서로 같은지 비교하는 함수
  		- HashCode			: 객체를 식별하는 하나의 정수값
  		- identityHashCode	: 실제 객체위치 을 확인하는 함수
  		- clone				: 객체를 복제하는데 사용되는 메서드
  
 	- String 클래스
 		- contain	: 문자열 포함여부
 		- split		: 구분자를 기준으로 문자열을 분할 (배열형으로 저장)
 		- join		: 구분자를 기준으로 문자열을 합친다
 		- trim		: 앞뒤 공백 제거
 		- indexof	: 문자열의 인덱스 번호 확인
 		- substring	: 문자열 자르기
 		- equals	: 문자열의 내용이 같은지 확인
 		- String 클래스는 기본적으로 equals를 오버라이딩하고 있다.
 		- char[] 대신 문자열을 쉽게 다룰수 있는 클래스
 		- StringBuffer 클래스	: 문자열의 수정이 잦을때 활용되는 클래스
 		
 	- System 클래스
  		- 모든 필드와 메서드는 정적필드와 정적메소드로 구성
  			- exit()				: 프로그램 종료
  			- currentTimeMillis()	: 컴퓨터의 시계로부터 현재 시간을 읽어서 밀리세컨드 단위로 리턴
  			- nanoTime()			: 나노세컨드 단위의 long 값 리턴
 		
 	- Wrapper 클래스
 		- 기본형 타입들을 클래스화 한것
 			- boolean	: Boolean
 			- char		: Character
 			- byte		: Byte
 			- short		: Short
 			- int		: Integer
 			- long		: Long
 			- float		: Float
 			- double	: Double
 		- 만든 이유	: 클래스화 하여 다양한 메서드를 제공하기 위함
 		- 제너릭 같이 클래스 타입을 요구할때 사용해야 한다
 		
 	 	- Date 클래스
 		- Calendar 클래스가 나오기 전까지 사용된 클래스
 		- 메서드
 			- getYear	: 년도를 출력
 			- getMonth	: 0 ~ 11까지 출력하므로 뒤에 +1을 더한다
 			- getDay	: 0 ~ 6 으로 출력되며 일 ~ 토 순서이다
 			- getDate	: 날짜를 출력
 			- getHours	: 시간을 출력
 			- getMinutes: 분을 출력
 			- getSeconds: 초를 출력
 		
 	- Calendar 클래스
 		- 날짜와 시간을 다루는 클래스
 		- Calendar 은 객체사 생성 불가하다
 		- 메서드
 			- getInstance	: 기본은 현재 시스템의 시간
 			- YEAR			: 년도를 출력
 			- MONTH	+1		: 0~11 까지 출력하므로 뒤에 + 1을 더한다
 			- DATE			: 날짜를 출력
 			- HOUR			: 시간
 			- MINUTE		: 분
 			- SECOND		: 초
 			- MILLISECOND	: 1000분의 1초
 			- DAY_OF_WEEK	: 1~7 로 출력되며 일 ~ 토 순서이다
 	
 	- Formatter 클래스
 		- SimpleDateFormat	: 날짜 형식을 변경해준다
 			- 객체를 생성후 사용할수있다.
 			- Calendar 객체를 생성후 Date 클래스로 형 변환을 하여 사용할수도 있다.
 				- 바로 SimpleDateFormat 을 생성 하면서 뒤에 ("원하는 형식").format(Date클래스로 형변환한 Cal 객체명)
 				  으로 바로 System.out.println을 사용할수 있다.
 				  - 예 : Calendar cal = Calendar.getInstance();
 				  		 Date date = cal.getTime();
 				  		 System.out.println(new SimpleDateFormat("yyyy-MM-dd").format(date);
 			- format 할때 월 분은 mm 으로 표시되어 월은 대문자 분은 소문자로 표시한다.	  
 	
  13. 예외처리
 	- 오류의 종류	
 		- 컴파일 오류	: 문법 오류(Syntax Error) / 오타, 문법, 자료형 체크 등등 실행 하지 않아도 알수 있는 오류
 		- 런타임 오류	: 실행 오류 / 행, 강제종류, NullPointException 등 
 			- 에러	: 메모리 부족, 스택오버플로우 등등 복구가 힘든 심각한 오류 (구조상 오류)
 			- 예외	: 예외처리 코드를 미리 작성해둠으로써 프로그햄 실행이 유지될수 있는 오류(경미한 오류, 예측가능)
 		- 버그		: 예기치 못한 오류
 		
 	- 오류의 관계도
 		- Object
 			- Throwable
 				- Error
 				- Exception(예외의 최상위 클래스, Checked 예외 -> 반드시 예외처리 해야한다)
 					- RuntimeException(런타임 오류, Unchecked 예외 -> 컴파일은 통과된다)
 						- ClassNotFoundException	: 외부에서 클래스 파을 참조시 이름이 잘못 입력
 						- FileNotFoundException		: 외부파일을 찾지 못함
 						- DataFormatException		: 사용자가 잘못된 데이터를 입력
 						
 					- IOException(Checked 예외 -> 반드시 예외처리 해야한다)
 	- 예외처리
 		- try catch 	: 예외 발생시 별도의 처리를 하지 않으면 프로그램이 비정상 종료된다
 		- 예외 원인 확인	: 변수명.getCause()
 		- 예외객체 메세지확인	: 변수명.toString()
 		- 예외객체 식별정보	: 변수명.getStackTrace()
 		- 예외메세지 출력	: 변수명.printStackTrace()
 	
 	- 예외 넘기기
 		- throws	: 메서드 내부에서 해당 예외 발생시 메서드를 호출한쪽으로 예외를 넘긴다.
 					  Unchecked 예외를 넘긴다면 호출하는 쪽에서 반드시 예외처리를 해줘야 된다
 					  
 	- finally	: 예외와 상관없이 반드시 실행되어야 하는 코드는 try catch문 다음에 finally 로 감싸준다
 				  파일 입출력중 close 메서드 사용시 에외가 발생할수도 있기에 finally 안에서 다시 예외처리를 해줘야한다
 	
 	- try with resource문 : 입출력 을 사용할때 close를 자동으로 호출해준다.
 	
 	- 사용자 정의 예외
 		- 일반적으로 RuntimeException을 상속받아 만들어 예외처리를 선택적으로 사용할수 있게 만든다.
 		
  14. Generic
  	- 사용방법	: class <> 객체명 = new class <>();
  			  class <> 객체명 = new class(); 
  			  오른쪽과 왼쪽의 타입이 같다면 왼쪽에서 <> 제외해도된다.
  			  
  	- 제네릭 : 클래스나 메서드의 코딩시점이 아닌 사용하는 시점으로 타입선언을 미뤄 어떠한 타입이든 다 받을수 있는것
  	- 타입 병수명은 T 로 정해진건 아니다
  	- 사용시 정확한 타입을 명시
  	- 컴파일 시점까지도 어떤 타입일지 알수 없다. 객체 생성시에 타입이 정해진다
  	- Object 를 써도되나 Object는 타입 캐스팅을 해줘야 하며 의도하지 않은 타입이 사용될수 있다.
  	- 변수의 타입으로 지정은가능 하나 new 연사자는 컴파일시점에 어떤타입인지 정해져야한다.
  	- 제한적인 제네릭
  		- 제네릭 생성할때 제안을 두고 싶다면	: <> 안에 상속 받은 클래스의 부모를 상속받으면 된다.
  	
  	- 제네릭 메서드	
  		- 제네릭의 타입은 오버로딩의 대상이 아니다
  		- 리턴 타입 앞에 <> 기호를 추가하고 타입 파라미터를 기술한다
 	- 제네릭은 복수로 사용할수 있다.
 	
  15. 컬렉션(자료구조)
  	- List	: 차례대로 모여있는 데이터이면서 중복을 허용한다.
  			- ArrayList		: Vector를 개선한것이며 내부안에 배열을 사용한다
  				삭제시		: 중간의 요소를 삭제시 뒤인덱스부터 마지막 인덱스 까지 모두 앞으로 1씩 당겨진다.
  						  
  			- LinkedList	: 연속되지 않은 공간에 데이터를 할당하여 앞뒤로 링크 시켜놓는다
  						  내부 배열 형태가 아닌 인접 참조를 링크해서 체인처럼 관리된다. 
  				삭제시		: 그러므로 중간 요서를 삭제해도 ArrayList 랑 다르게 일일이 인덱스를 설정해줄 필요가 없다
  						  
  			- Stack			: 후입선출임으로 나중에 들어간 값이 먼저 나온다
  				삭제시		: 뒤에 들어간 요소에서 지속적으로 추가 삭제가 일어난다. 그러므로 ArrayList로 구현하는것이 적합하다
  						  
  			- Queue			: 선입선출임으로 먼저 들어간것이 먼저 나온다
  				삭제시		: 먼저 들어간것이 먼저 삭제된다. ArrayList로 만들면 뒤에 있는 요소들이 전부 이동해야 한다.
  						  그러므로 LinkedList로 구현하는것이 적합하다. 
  						  
  			- Vector		: ArrayList와 다른점은 멀티 스레드환경에서 안전하게 객체를 추가/삭제할 수 있다.
 
 		- 공통 메서드
 			- 객체추가
 				- boolean add(E e)				: 주어진 객체를 맨 끝에 추가
 				- void add(int idx,E element)	: 주어진 인덱스에 객체를 추가
 				- E set(int idx, E element)		: 주어진 인덱스에 저장된 객체를 주어진 객체로 변경
 		
 			- 객체검색
 				- boolean contains(Object o)	: 저장되어 있는 전체 객체 수를 리턴
 				- E get(int idx)				: 주어진 인덱스에 저장된 객체를 리턴
 				- boolean isEmpty()				: 컬렉션이 비어 있는지 확인
 				- int size()					: 저장되어 있는 전체 객체 수를 리턴
 		
 			- 객체 삭제
 				- void clear()					: 저장된 모든 객체를 삭제
 				- E remove(int idx)				: 주어진 인덱스에 저장된 객체를 삭제
 				- boolean remove(Object o)		: 주어진 객체를 삭제
 		
 
 		
  	- Set	: 순서가 없는 데이터이면서 중복을 허용 하지 않는다
  		- HashSet		: 순서 없이 저장하며 동일 객체는 중복 저장하지 않는다
  						  hashCode 메서드를 호출해서 얻어낸 해시코드를 통해 객체의 동등비교후 중복되지 않는 데이터를 Set한다
  		
  		- LinkedHashSet	: 중복을 허용하지 않으면서 순서를 유지 한다. 
  						  내부적으로 해시 테이블을 사용하여 빠른 검색과 삽입이 가능화다
  		
  		- TreeSet		: 중복을 허용하지 않으면서 요소는 자동으로 정렬된 순서로 유지된다
  						  SortedSet 인터페이스를 구현하여 정렬 관련 메서드를 활용 할수 있다.
  	
  	- 공통 메서드
 		- 객체추가
 			- boolean add(E e)				: 주어진 객체를 저장하고 객체가 성공적으로 저장되면 true 리턴 , 중복이면 false 리턴
 			
 		- 객체검색
 			- boolean contains(Object o)	: 주어진 객체가 저장되어 있는지 조사
 			- boolean isEmpty()				: 컬랙션이 비어 있는지 확인
 			- Iterator<E> iterlator()		: 저장된 객체를 한번씩 가져오는 반복자를 리턴
 			- int size()					: 저장되어 있는 전체 객체수를 리턴
 			
 		- 객체삭제
 			- void clear()					: 저장된 모든 객체를 삭제
 			- boolean remove(Object o)		: 주어진 객체를 삭제
 					
 			
  	- Map	: 키와 값의 쌍으로 이루어진 데이터이면서 키는 중복을 허용 하지 않는다
  		- HashMap		: Map 인터페이스를 구현한 대표적인 Map 컬렉션이다
  						  HashMap의 키로 사용할 객체는 hashCode와 equals 메소드를 재정의해서 동등객체가 될 조건을 정해야한다.
  		
  		- HashTable		: HashMap과 동일한 내부구도를 가지고 있으나 HashTable은 동기화된 메소드 구성으로 인해 스레드 환경으로부터 안전하다
  		
  		- TreeMap		: 증복을 허용하지 않으면서 요서는 자동으로 정렬된 순서로 유지된다
  						  이진검색 트리를 사용하여 효율적인 검색, 삽입, 삭제를 할수잇다
  						  SortedMap 인터페이스를 구현하여 정렬관련 메서드를 활용할수 있다.
  		
  		- Properties	: 중복을 허용하지 않으면서 properties 확장자를 가진 설정 파일과의 호환성을 제공하여 설정 정보를 저장하고 관리할수 잇다.
  						  파일 입출력이 지원되어 설정 파일을 로드하고 저장하기위해 load 와 store 메서드가 사용된다.
  	
  	- 공통 메서드
 		- 객체추가
 			- V put(K key,V value)					: 주어진키로 값을 저장하며 새로운 키일경우 null 리턴하고 동일한 키가 있을 경우 값을 대체하고 이전 값을 리턴
 		
 		- 객체검색
 			- boolean containsKey(Object key)		: 주어진 키가 있는지 여부를 확인
 			- boolean containsValue(Object value)	: 주어진 값이 있는지 여부를 확인
 			- Set<Map.entry<K,V>> entrySet()		: 키와 값의 쌍으로 구성된 모든 map.entry 객체를 set에 담아서 리턴
 			- V get(Object key)						: 주어진 키가 있는 값을 리턴
 			- boolean isEmpty()						: 컬렉션이 비어있는지 확인
 			- Set<K> keySet()						: 모든 키를 set 객체에 담아서 리턴
 			- int size()							: 저장된 키의 총수를 리턴
 			- Collection<> values()					: 저장된 모든 값을 Collection에 담아서 리턴
 			
 		- 객체삭제
 			- void clear()							: 모든 Map.Entry(키와 값)을 삭제
 			- V remove(Object key)					: 주어진 키와 일치하는 Map.Entry를 삭제하고 값을 리턴
 										  
 							  
  16. GUI
  	- 구조
  		- 새로운 프레임이나 창으로 객체를 생성하여 프로그램을 시작
  		- 레이아웃 객체를 사용하여 기본 레이아웃을 정의
  		- 화면 구성에 필요한 컴포넌트(버튼, 스크롤바, 아이콘, 툴바 등)들을 생성하고 레이아웃에 배치
  		- 사용자와 상호작용(클릭, 키보드 입력, 마우스 이동 등)을 하는 이벤트 랜들러를 등록 
  		- 발생한 이벤트를 처리하는 코드를 구현
  		
  	- Swing 과 AWT 의 비교
  		- 텍스트 출력
  			- AWT	: Label 
  			- Swing	: JLabel
  			
  		- 멀티 라인 텍스트 출력
  			- AWT	: Multiple Labels 
  			- Swing	: Multiple JLabels 또는 JLabel 과 HTML content
  			
  		- 다중 라인 포멧 텍스트 출력
  			- AWT	: Multiple Labels와 다양한 폰트
  			- Swing	: JLabel과 HTML content
  			
  		- 단일 라인 텍스트 입력
  			- AWT	: TextField
  			- Swing	: JTextField
  			
  		- 다중 라인 텍스트 입력
  			- AWT	: TextArea 
  			- Swing	: JTextArea
  			
  		- 이미지 출력
  			- AWT	: N/A
  			- Swing	: JLabel
  			
  		- 텍스트와 이미지 출력
  			- AWT	: N/A
  			- Swing	: JLabel
  			
  		- ToolTip 팝업 도움말
  			- AWT	: N/A 
  			- Swing	: setToolTip on component, subclass JToolTip
  			
  		- 텍스트 입력 스타일
  			- AWT	: N/A 
  			- Swing	: JEditorPane
  			
  		- 푸시버튼과 텍스트
  			- AWT	: Button
  			- Swing	: JButton	
  			
  		- 푸시버튼, 텍스트/이미지
  			- AWT	: N/A
  			- Swing	: JButton
  			
  		- 그리기 영역
  			- AWT	: Canvas
  			- Swing	: JPanel
  			
  		- On/Off 체크박스
  			- AWT	: CheckBox
  			- Swing	: JCheckBox
  			
  		- 라디오 선택
  			- AWT	: CheckBoxGroup
  			- Swing	: ButtonGroup과 메뉴	
  			
  		- 드랍다운 리스트 선택
  			- AWT	: Choice
  			- Swing	: JComboBox
  			
  		- 텍스트 입력 또는 드롭다운 리스트
  			- AWT	: N/A
  			- Swing	: JComboBox
  			
  		- 스크롤 영역
  			- AWT	: ScrollPane
  			- Swing	: JScrollPane	
  			
  		- 최상위 창
  			- AWT	: Dialog, Frame, Window
  			- Swing	: JDialog, JFrame, JWindow	
  			
  		- 기본창
  			- AWT	: Window
  			- Swing	: JWindow	
  			
  		- 프레임창
  			- AWT	: Frame
  			- Swing	: JFrame
  			
  		- 다이얼로그 창
  			- AWT	: Dialog
  			- Swing	: JDialog
  			
  		- 메뉴
  			- AWT	: Menu
  			- Swing	: JMenu
  			
  		- 메뉴 항목
  			- AWT	: MenuItem
  			- Swing	: JMenuItem	
  			
  		- 메뉴 단축
  			- AWT	: 키 스토로크
  			- Swing	: AWT와 동일	
  			
  		- 팝업 메뉴
  			- AWT	: PopupMenu
  			- Swing	: JPopupMenu
  			
  		- 메뉴 바
  			- AWT	: MenuBar
  			- Swing	: JMenuBar
  			
  		- 삽입 기호 출력
  			- AWT	: N/A
  			- Swing	: caret
  			
  	- 이벤트 클래스 종류
  		- ActionEvent		: 컴포넌트에 정의된 해우이가 발생했을때 나타나는 이벤트이다. addActionListener 메서드로 등록하여 ActionListener에 이벤트를 넘긴다
  		- MouseEvent		: 컴포넌트에 마우스 액션이 발생할때 나타나는 이벤트 이다. addMouseListener 메서드로 등록하며 MouseListener, MouseAdapterListener에 이벤트를 전달한다
  		- MouseWheelEvent	: 컴포넌트 안에서 마우스 휠을 회전했을때 나타나는 이벤트이다. addMouseWheelListener 메서드로 등록하며 MouseWheelListener에 이벤트를 전달한다 
  		- KeyEvent			: 컴포넌트 안에서 키 입력으로 나타나는 이벤트이다. addKeyListener 메서드로 등록하며 KeyListener에 이벤트를 전달한다
  		- ComponentEvent	: 컴포넌트의 이동, 크기 변결 등 변화가 있을 때 나타나는 이벤트이며 addComponentListener 메서드로 등록하며 ComponenetListener에 이벤트를 전달한다
  		- ContainerEvent	: 컴포넌트를 추가하거나 삭제할때 컨테이너에 변확가 발생하면 나타나는 이벤트이고 addContainerListener 메서드로 등록하며 ContainerListener에 이벤트를 전달한다
  		- ItemEvent			: 항목을 선택하거나 해제할때 나타나는 이벤트이다. addItemListener 메서드로 등록하며 ItemListener에 이벤트를 전달하다
  		
  	- 이벤트 클래스
  		- ActionEvent		: 버튼이 눌러졌거나 텍스트필드의 입력이 완료되었을때 메뉴의 항목이 선택되었을때 리스트의 항목이 더블클릭되었을때 발생
  		- AdjustmentEvent	: 스크롤바의 버블이 움직일때 발생
  		- ComponentEvent	: 컴포너트의 위치나 크기가 변경되었을때 또는 컴포넌트가 나타나거나 숨겨질때 발생
  		- ContainerEvent	: 컴포넌트가 컨테이너에 추가되거나 제거될때 발생
  		- FocusEvent		: 컴포넌트가 키보드로부터 입력을 받아들이기 위한 포커스를 획득하거나 잃었을때 발생
  		- ItemEvent			: 체크박스나 콤보박스, 라디오버튼, 리스트의 항목이 선택되었을대 발생
  		- KeyEvent			: 키보드로부터 입력이 있을때 발생
  		- MouseEvent		: 사용자가 마우스 버튼을 누르거나 놓을때 마우스가 컴포넌트 위로 들어가거나 나올때 또는 사용자가 마우스를 이동하거나 드래그할때 발생
  		- TextEvent			: 입력된 텍스트레 변경이 일어날때 발생
  		- WindowEvent		: 윈도가 열리거나 닫힐때 최소화하거나 최대화할때 윈도 메뉴가 선택될때 발생
  		
  	- 컴포넌트가 발생시키는 이벤트 클래스
  		- JButton			: ActionEvent
  		- JCheckbox			: ItemEvent
  		- JCheckboxMenuItem	: ItemEvent
  		- JComboBox			: ItemEvent
  		- Component			: ComponentEvent, FocusEvent, KeyEvent, MouseEvent
  		- Container			: ContainerEvnet
  		- List				: ActionEvent, ItemEvent
  		- MenuItem			: ActionEvent
  		- Scrollbar			: AdjustmentEvent
  		- ScrollPane		: AdjustmentEvent
  		- TextComponent		: TextEvent
  		- TextField			: ActionEvent
  		- Window			: WindowEvent
  		
  17. 파일 입출력
  	- 문자 스트림	: 문자기반의 스트림은 모두 Reader, Writer을 상속받는다
  				  문자기반 스트림은 기본 2바이트를 사용한다
  		- Reader
  			- 주요메서드
  				- int read()									: 단일 문자를 하나 읽어와 읽은 문자의 유니코드값을 리턴
  				- int read(char[] b)							: 문자를 b의 크기만큼 읽어 b 에 저장하고 읽은 문자개수를 리턴
  				- abstract int read(char[]b,int off, int len)	: len(길이) 만큼 읽어 b 의 off 위치에 저장하고 실제 읽어온 문자 개수를 리턴
  		
  		- Writer 
  			-주요메서드
  				- void write(String s)							: 문자열을 출력
  				- void write(char[]b)							: char배열을 출력
  				- void writer(char[] b,int off, int len)		: b의 off 위치부터 len(길이) 만큼 문자를 출력
  				- void writer(String s,int off, int len)		: s의 off 위치부터 len(길이) 만큼 문자열을 출력
  				
  	- 바이트 스트림	: 바이트 기반의 스트림은 모두 InputStream, OutputStream을 상속받는다.
  				  바이트 기반 스트림은 기본 1바이트를 사용하기에 한글을 쓰면 깨진다
  				  
  		- InputStream
  			- 주요메서드
  				- int read()							: 추상 메서드로, 입력 스트림에서 한 바이트씩 일어서 0~255 값을 리턴하며 더이상 리턴할것이 없으면 -1을 리턴
  				- int read(byte[] b)					: 바이트의 크기만큼 읽어와 읽어온 바이트 개수를 리턴
  				- int read(byte[] b,int off, int len)	: 최대 길이만큼 읽어 b의 끝 위치에 저장하고 읽은 바이트 개수를 리턴
  				- int available()						: 읽을 수 있는 바이트 개수를 리턴
  				- void close()							: 입력 스트림을 닫아 스트림과 관련된 시스템 자원을 반환
  				
  		- OutputStream
  			- 주요메서드
  				- void write(int b)						: b의 하위 8비트를 출력
  				- void write(byte[] b)					: b의 내용을 출력 
  				- void write(byte[] b,int off, int len)	: b의 off 위치부터 len(길이) 만큼 바이트를 출력
  				- void flush()							: 버퍼에 남은 바이트를 출력
  				- void close()							: 출력스트림을 닫아 출력 스트림과 관련된 시스템 자원을 반환
  	- 보조스트림
  		- 입력
 			- FilterInputStream		: 필터를 이용한 출력
 			- BufferInputStream		: 버퍼를 이용한 성능향상
 			- DataInputStream		: 기본타입으로 데이터를 처리(int, double)
 			- SequenceInputStream	: 두개의 스트림을 하나로 연결
 			- ObjectInputStream		: 객체 단위로 I/O
 			- PushbackInputStream 	: 버퍼를 이용해 읽은 데이터를 다시 되돌린다	
 			- InputStreamReader		: 바이트 기반 입력 스트림에 연결되어 문자 입력 스트림인 Reader로 변환
 				
  		- 출력	
  			- FilterOutputStream	: 필터를 이용하 출력
  			- BufferedOutputStream	: 버퍼를 이용한 성능향상
  			- DataOutputStream		: 기본타입으로 데이터를 처리(int, double)
  			- ObjectOutputStream	: 객체 단위로 I/O
  			- PrintStream			: Print 관련기능(버퍼를 사용함) / print, println
  				- PrintStream		: 바이트 기반 출력 스트림
  				- PrintWriter		: 문자 기반 출력 스트림
  			
  			- OutputStreamWriter	: 바이트 기반 출력스트림에 연결되어 문자출력 스트림인 Writer로 변환
  	
  	- 문자기반 스트림 복사
  		- 원본 데이터를 불러와 while 문으로 무한 루프를 돌리고 안에서 if 문을 사용하여 -1 이 나오면 break 하고 불러온 데이터를 지정한 파일명으로 저장					  
 	
 	- 바이트기반 스트림 복사
 		- 원본 데이터를 byte 배열에 불러온후 while 문으로 무한 루프를 돌리고 안에서 if 문을 사용하여 -1 이 나오면 break 하고 불러온 데이터를 지정한 파일명으로 저장
 		
 	- 파일 관련 주요 클래스
 		- File				: 경로 정보를 바탕으로 해당 파일을 사용하는 객체를 생성하고, 파일과 디렉터리 관련 여러 메서드를 제공한다
 		- FileReader		: 파일에서 문자 스트림을 기반으로 한 입력을 처리하는 클래스이
 		- FileWriter		: 파일에서 문자 스트림을 기반으로 한 출력을 처리하는 클래스
 		- FileInputStream	: 파일에서 바이트 스트림을 기반으로 한 입력을 처리하는 클래스
 		- FileOutputStream	: 파일에서 바이트 스트림을 기반으로 한 출력을 처리하는 클래스
 		- RadnomAccessFile	: 임의로 파일의 특정 위치를 읽고 쓰는 파일 객체를 제공
 		
 		
 		
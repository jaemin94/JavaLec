  1. 인터페이스
  	- 사용 이유 
  		- 낮은 결합도 유지 				: 다형성 구현에 인터페이스를 사용하여 결합도를 낮춤
  		- 설계 사상을 코딩단계에서 구현		: 인터페이스를 통해 정의한 내용을 코딩단계에서 클래스로 구현되도록 강제 할수있다.
  	- 멤버 메서드가 모두 추상 메서드인 추상클래스
  	- 선언시 class 대신 interface 라고 선언
  	- 인터페이스의 부모는 무조건 인터페이스여야 한다
  		- 인터페이스 vs 추상클래스 
  			- 추상클래스와 다르게 모든 메서드가 추상메서드인다. 
  			- 인터페이스는 내부가 구현된 메서드를 가질수 없다.
  	
  	- 인터페이스는 다중 상속이 가능하다.
  	- 인터페이스를 구현할때 클래스명 뒤에 implements 라는 키워드를 붙이고 그후 사용할 인터페이스를 입력한다.
  	- 인터페이스 구현은 상속과는 별개로 클래스를 상속 받으면서 인터페이스도 사용이 가능하다
  	- 클래스를 상속받으면서 인터페이스를 구현할때는 extends 클래스명 implements 인터페이스명 으로 사용가능하다
  	- Static 메서드는 객체와 무관한 메서드여서 인터페이스에서도 사용이 가능하다
  	- 인터페이스는 구현할때 추상 메서드들을 무조건 구현해야한다.
  	- default 메서드
  		- 인터페이스 특성상 모든 추상메서드를 구현해야하는데 만약에 인터페이스에 추가가 된다면 인터페이스를 사용하는 모든 클래스를
  		  재정의하게 된다. 이를 방지하기 위한것이 default 메서드이다.
  		- 이때 메서드 앞에 default 를 붙이고 줄괄호를 만들어주면서 이 메서드를 사용할 클래스 내에서 재정의를 해주면된다.
  		- 하지만 이러한 코드는 인터페이스 목적과는 맞지않는 코드라 안좋게 볼수도 있다.
  		  
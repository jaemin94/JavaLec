  1. Thread
  	- Thread	: 프로세스 내부에서의 실행흐름 단위이고 최소한 1개이상의 쓰레드를 가진다.
  				: 메인쓰레드와 작업쓰레드로 나뉜다
  	
  	- 쓰레드의 활용
  		- 쓰레드가 없다면 서버와의 통신, 프린터, 로그 남기기 등등 백그라운드에서 처리해야 하는 일을 수행할때마다 UI가 멈춘다
  	
  		- 싱글쓰레드	: 메인쓰레드 하나만 실행된다
  		- 멀티쓰레드	: 메인쓰레드 하나와 다른 작업쓰레드가 동시에 실행된다
  		
  	- Thread 클래스로부터 직접 생성
  		- 작업 쓰레드 객체를 직접 생성하려면 Runnable을 매개값으로 갖는 생성자를 호출해야한다.
  			- 예시	: Thread thread = new Thread(Runnable target);
  		
  		- Runnable은 인터페이스 타입이기 때문에 구현 객체를 만들어 대입해야한다
  		- Runnable 에는 run() 메소드가 하나 정의 되어있는데 구현 클래스는 run() 을 재정의해서 작업쓰레드가 실행할 코드를 작성
  		
  	- Thread 하위 클래스로부터 생성
  		- Thread 클래스를 상속한 후 run() 메소드를 재정의 해서 쓰레드가 실행할 코드를 작성한다
  		
  	- 쓰레드 이름지정의 목적
  		- 디버깅시 조사를 위해서 사용된다
  			- 이름 설정 	: thread.setName("쓰레드이름");
  			- 이름 확인	: thread.getName();
  			
  	- 쓰레드 동기화란
  		- 공유 객체를 특정 쓰레드가 점유해서 사용할때 다른 쓰레드가 접근하지 못하도록 제한하며 이를 임계영역이라고 한다
  		
  		- 동기하 메서드	: 동기하 메서드를 실행하면 즉시 객체에 잠금을 걸어 다른 쓰레드가 동기화 메서드를 실행하지 못하도록 한다
  			- 코드	: public synchronized void method(){ 임계영역 // 단하나의 쓰레드만 실행한다 }
  			
  	- 쓰레드 상태제어 메서드
  		- interrupt()	: 일시정지 쓰레드에서 실행대기 or 종료 상태로 전환
  			- 쓰레드가 일시 정지 상태에 있을때 InterruptedException을 발생 시키는 역활이고 이를 이용해서 run() 메서드를 정상종료 시킨다
  			
  		- sleep()		: 주어진 시간동안 일시정지, 이후 자동 실행
  			- 실행중인 쓰레드를 일정시간 정지 시킨다
  			
  		- stop()		: 쓰레드를 즉시 종료, 불안정한 종료이므로 사용하지 않는게 좋다
  			- 쓰래드를 즉시 종료하는 메서드
  			
  		- run()			: 쓰레드를 실행시키는 메서드, 단 메인에서는 start()를 실행시키고 run()은 서브쓰레드에서 실행시키기 위해 직접 호출 X
  		
  		- Start()		: OS가 쓰레드 스케쥴러를 통해 언제 실행할지를 결정
  			
  	- DemonThread
  		- 주 쓰레드의 작업을 돕는 보조적인 역할을 수행하는 쓰레드이다
  		- 주 쓰레드가 종료되면 데몬쓰레드는 강제적으로 자동종료
  		- 그 이외는 일반 쓰레드와 큰 차이는 X
  		
  		
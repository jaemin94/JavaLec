   1. 상속
 	- 상속을 사용하는 3가지 이유	: 확장성, 유지보수, 가독성
  	- 만들어 놓은 클래스의 멤버변수 와 멤버 메서드를 다른 클래스에 extends 를 뒤에 붙여 기존 클래스를 상속 받을수있다.
  	- 자식에서 멤버변수 와 멤버 메서드를 만들지 않아도 상속받아 마치 선언해놓은것처럼 사용할수있다.
  	- 받은 하위클래스는 상위클래스의 속성과 기능 이외의 멤벌르 추가할 수 있다.
  	- 부모의 멤버를 가져오는것이 아니라 부모와 별도로 멤버를 생성하는것이다.
  	- 부모가 디폴트생성자가 없다면 자식 또한 디폴트 생성자를 만들어주지 않는다.
  	- 다중 상속은 되지 않는다. 
  	 	
  	- super
 		- 부모로부터 물려받은 멤버변수, 메서드를 가리킬때 사용한다.
 		- 부모로 부터 상속받은 멤버 변수들은 부모의 멤버변수와는 별개로 생성된다.
 		- 부모의 메서드를 오버라이딩 할때도 사용된다.
 		
 	- 오버라이딩(재정의)
 		- 상속받은 부모의 메서드를 물려받은 멤버변수, 메서드를 자식이 새롭게 덮어쓰는 것이다.
 		- 메서드의 이름, 매개변수, 리턴 타입이 일치해야한다.
 		- 리턴이 부모타입일때 자식의 타입으로 변환하여도 오버라이딩으로 인정된다.
 		- 오버라이딩이 아니라면 함수 이름과 매개변수가 같기에 오버로딩으로 분류된다
 		- 오버로딩은 리턴타입을 고려하지 않기에 결국 메서드 중복정의로 해당메서드를 문법적으로 만들 방법이 없다.
 		- static : 인스턴스 메서드의 변환은 불가능하다
 		
 		- 오버로딩과의 차이점
 			- 오버라이딩	: 상속시 부모의 메서드를 덮어쓴다. 시그니처가 동일하다
 			- 오버로딩		: 메서드를 증설한다. 시그니처가 다르다
 			
 	- 다향성
 		- 캐스팅		
 			- 자동형변환
 				- 업캐스팅(자식 이 부모 타입으로 형변환)
 					- 사용하는 이유 : 상속받는 모든객체를 알기위해서 사용한다.
 					- 부모 클래스형의 참조변수 = 자식클래스의 객체
 					- 부모 클래스형의 참조변수를 통해서는 부모 클래스의 속성에만 접근 가능
 					- 자식 클래스는 부모의 모든 정보를 가지고 있기에 자동적으로 형변환이 된다.
 					- 하지만 자식 클래스에서 추가된 메서드, 멤버변수는 사용할수가 없다.
 					- 업캐스팅 되어있으면 오버라이딩을 통해 물려받은 메서드를 변경하여 사용할수있다.
 				
 			- 명시적형변환
 				- 다운캐스팅(부모 가 자식 타입으로 형변환)
 					- 사용하는 이유 : 상속받는 범위외에 확장된 멤버변수, 메서드를 사용하기위해 사용한다.
 					- 부모 클래스는 자식클래스의 모든 정보를 가지고 있기 않기에 객체를 생성할때 명시적으로 형변환을 해야한다.
 					- 자식타입으로 다운캐스팅을 하면 자식 클래스 내의 추가된 메서드, 멤버 변수를 사용할수가 있다.
  	
  			- instanceof
  				- 참조 변수가 가리키는 실제 객체의 타입이 무엇인지 알수 있는 키워드이다.
  				- 사용 할때는 if문 또는 여러개를 한번에 찾아볼 경우에느 if-else 문을 사용한다
  		
  		- 추상 클래스 와 추상 메서드
  			- 사용하는 이유 : 프로그램을 구체적으로 어떻게 구현할지 결정이 되지 않앗거나, 프로그램을 동일한 규격으로 만들수 있도록 가이드를 제공하기 위함
  			- class 앞에 abstract 클래스명으로 정의하여 만들수있다.
  			- 만약 추상 메서드가 있다면 클래스도 반드시 추상클래스로 정의해야된다.
  			- 상위 클래스가 하위 클래스한테 메서드를 쓰라고 강제성을 부여 한다.
  			- 추상 메서드를 하나 이상 포함해야한다.
  				- 추상메서드	: 정의되지 않고 선언만 한 메서드
  				- 예시		: abstract void Func1() , 바디를 만들지 않는다.
  			 			
  			- 추상 클래스는 객체를 생성에 사용되지 않으며 반드시 추상 클래스를 상속받은 클래스를 만드후에
  			  상속받은 모든 추상 메서드를 오버라이딩하여 일반 메서드로 완성한 다음에 객체를 생성할수있다.	
  			  
  			  